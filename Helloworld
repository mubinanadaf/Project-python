from datetime import datetime
import sys
from app.audits.audits import create_audits
from app.extractors.data_extractor import get_sql_connection, fetch_large_data
from app.convertors.schema_generator import generate_avro_schema
from app.convertors.convert_to_avro import convert_to_avro

def process_data_pipeline(config, query_name):
    gcs_token = get_gcs_token()
    output_path = config["paths"]["output_path"]

    # Stage 1️⃣ SQL Connection & Data Extraction
    unix_start_time = int(datetime.now().timestamp())
    extracted_file = None
    try:
        conn = get_sql_connection(config)
        Logger.info("SQL connection established successfully")

        extracted_file, columns = fetch_large_data(conn, config, query_name)
        if extracted_file == "error" or not columns:
            raise Exception("Data extraction failed")

        unix_end_time = int(datetime.now().timestamp())
        create_audits(
            output_path, gcs_token,
            [extracted_file],
            unix_start_time, unix_end_time
        )
        Logger.info("SQL extraction audit logged.")
    except Exception as e:
        unix_end_time = int(datetime.now().timestamp())
        create_audits(
            output_path, gcs_token,
            [extracted_file if extracted_file else "sql_extraction"],
            unix_start_time, unix_end_time
        )
        Logger.error(f"SQL extraction failed: {e}")
        sys.exit(1)

    # Stage 2️⃣ AVRO Schema Generation
    unix_start_time = int(datetime.now().timestamp())
    try:
        generate_avro_schema(config, query_name, columns)
        unix_end_time = int(datetime.now().timestamp())

        create_audits(
            output_path, gcs_token,
            ["schema.avsc"],
            unix_start_time, unix_end_time
        )
        Logger.info("Schema generation audit logged.")
    except Exception as e:
        unix_end_time = int(datetime.now().timestamp())
        create_audits(
            output_path, gcs_token,
            ["schema.avsc"],
            unix_start_time, unix_end_time
        )
        Logger.error(f"Schema generation failed: {e}")
        sys.exit(1)

    # Stage 3️⃣ Avro Conversion (avro, ctl, toc)
    unix_start_time = int(datetime.now().timestamp())
    try:
        generated_files, unix_end_time = convert_to_avro(config)
        create_audits(output_path, gcs_token, generated_files, unix_start_time, unix_end_time)
        Logger.info("Avro conversion audit logged.")
    except Exception as e:
        unix_end_time = int(datetime.now().timestamp())
        create_audits(output_path, gcs_token, [], unix_start_time, unix_end_time)
        Logger.error(f"Avro conversion failed: {e}")
        sys.exit(1)

    Logger.info("All stages completed successfully.")
