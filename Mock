# ===== Minimal stubs matching your current style (sys.modules only) =====
import sys, types
from unittest.mock import MagicMock
from datetime import timedelta

# ---------- build a mock DAG object that works with `with DAG(...):` ----------
mock_dag = MagicMock(name="DAG()")
mock_dag.dag_id = "clean_up_outbound_bucket"
mock_dag.default_args = {
    "start_date": "2025-04-28",
    "retries": 1,
    "retry_delay": timedelta(minutes=5),
}
mock_dag.tasks = []
# make it usable as a context manager
mock_dag.__enter__.return_value = mock_dag
mock_dag.__exit__.return_value = False
# if your code calls dag.get_task(...)
mock_task = MagicMock(name="task")
mock_task.task_id = "delete_files_task"
mock_dag.get_task.return_value = mock_task

# ---------- airflow.utils.dates.days_ago ----------
mock_dates = types.ModuleType("airflow.utils.dates")
# return a fixed string as in your screenshot; change to datetime if you prefer
mock_dates.days_ago = MagicMock(return_value="2025-04-01")

# ---------- airflow.utils ----------
mock_utils = types.ModuleType("airflow.utils")
mock_utils.dates = mock_dates

# ---------- airflow root: expose DAG factory that returns our mock_dag ----------
mock_airflow = types.ModuleType("airflow")
mock_airflow.utils = mock_utils
mock_airflow.DAG = MagicMock(return_value=mock_dag)   # <-- your style

# register base modules
sys.modules["airflow"] = mock_airflow
sys.modules["airflow.utils"] = mock_utils
sys.modules["airflow.utils.dates"] = mock_dates

# ---------- airflow.models.Variable ----------
# Variable.get should hand back whatever your code expects
sys.modules["airflow.models"] = types.SimpleNamespace(
    Variable=MagicMock(
        get=lambda key, default_var=None, deserialize_json=False: {
            "app_common_variables": {"config_bucket": "mock_bucket"},
            "app_resource_variables": {"gcs_outbound_bucket": "gs://mock_bucket"},
        }.get(key, default_var)
    )
)

# ---------- airflow.operators ----------
# PythonOperator / BranchPythonOperator / BashOperator as MagicMocks
sys.modules["airflow.operators"] = types.ModuleType("airflow.operators")
sys.modules["airflow.operators.python"] = types.SimpleNamespace(
    PythonOperator=MagicMock(name="PythonOperator"),
    BranchPythonOperator=MagicMock(name="BranchPythonOperator"),
)
sys.modules["airflow.operators.bash_operator"] = types.SimpleNamespace(
    BashOperator=MagicMock(name="BashOperator")
)

# ---------- airflow.utils.context.Context ----------
airflow_utils_context = types.ModuleType("airflow.utils.context")
class Context(dict):  # lightweight stand-in
    pass
airflow_utils_context.Context = Context
sys.modules["airflow.utils.context"] = airflow_utils_context

# ---------- (optional) contrib operators if imported elsewhere ----------
# from airflow.contrib.operators.gcs_to_gcs import GoogleCloudStorageToGoogleCloudStorageOperator
# from airflow.contrib.operators.gcs_delete_operator import GoogleCloudStorageDeleteOperator
sys.modules["airflow.contrib"] = types.ModuleType("airflow.contrib")
sys.modules["airflow.contrib.operators"] = types.ModuleType("airflow.contrib.operators")
sys.modules["airflow.contrib.operators.gcs_to_gcs"] = types.SimpleNamespace(
    GoogleCloudStorageToGoogleCloudStorageOperator=MagicMock(name="GcsToGcs")
)
sys.modules["airflow.contrib.operators.gcs_delete_operator"] = types.SimpleNamespace(
    GoogleCloudStorageDeleteOperator=MagicMock(name="GcsDelete")
)

# ---------- Google Auth stubs (match your screenshots) ----------
mock_google_auth = MagicMock()
mock_google_auth.default = MagicMock(return_value=(MagicMock(), "clean_up_outbound_bucket"))
mock_google_auth_transport = MagicMock()
mock_google_auth_transport_requests = MagicMock()
mock_google_auth_credentials = MagicMock()
mock_google_service_account = MagicMock()
mock_google_auth_env_vars = MagicMock()

sys.modules["google.auth"] = mock_google_auth
sys.modules["google.auth.default"] = mock_google_auth.default
sys.modules["google.auth.transport"] = mock_google_auth_transport
sys.modules["google.auth.transport.requests"] = mock_google_auth_transport_requests
sys.modules["google.auth.credentials"] = mock_google_auth_credentials
sys.modules["google.oauth2.service_account"] = mock_google_service_account
sys.modules["google.auth.environment_vars"] = mock_google_auth_env_vars
# ===== end stubs =====
