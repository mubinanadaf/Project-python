# tests/conftest.py
import sys, types

# --- create package shells ---
airflow                 = types.ModuleType("airflow")
airflow_models          = types.ModuleType("airflow.models")
airflow_operators       = types.ModuleType("airflow.operators")
airflow_operators_py    = types.ModuleType("airflow.operators.python")
airflow_utils           = types.ModuleType("airflow.utils")
airflow_utils_context   = types.ModuleType("airflow.utils.context")

# --- minimal stubs used by your code ---
class DAG:
    def __init__(self, dag_id, start_date=None, schedule=None, default_args=None, **kwargs):
        self.dag_id = dag_id
        self.start_date = start_date
        self.schedule = schedule
        self.default_args = default_args or {}
        self.kwargs = kwargs

class PythonOperator:
    def __init__(self, task_id, python_callable=None, op_args=None, op_kwargs=None, dag=None, **kwargs):
        self.task_id = task_id
        self.python_callable = python_callable
        self.op_args = op_args or []
        self.op_kwargs = op_kwargs or {}
        self.dag = dag
        self.kwargs = kwargs
    # mimic Airflow chaining a bit (optional)
    def __rshift__(self, other): return other
    def __lshift__(self, other): return other

class Variable:
    @staticmethod
    def get(key, default_var=None):
        return default_var

class Context(dict):
    """Lightweight stand-in for airflow.utils.context.Context."""
    pass

# --- expose stubs on the package tree ---
airflow.DAG = DAG
airflow_models.Variable = Variable
airflow_operators_python = airflow_operators_py
airflow_operators_python.PythonOperator = PythonOperator
airflow_utils_context.Context = Context

# wire submodules
airflow.models = airflow_models
airflow.operators = airflow_operators
airflow.operators.python = airflow_operators_python
airflow.utils = airflow_utils
airflow_utils.context = airflow_utils_context

# --- register in sys.modules so imports succeed ---
sys.modules["airflow"] = airflow
sys.modules["airflow.models"] = airflow_models
sys.modules["airflow.operators"] = airflow_operators
sys.modules["airflow.operators.python"] = airflow_operators_python
sys.modules["airflow.utils"] = airflow_utils
sys.modules["airflow.utils.context"] = airflow_utils_context



....
import types
from unittest.mock import MagicMock
import sys

# ================= Mock airflow.models.Variable =================
mock_dag = MagicMock()
mock_task = MagicMock()
mock_task.task_id = "create_fileset_task"
mock_dag.tasks = [mock_task]
mock_dag.get_task.return_value = mock_task

sys.modules["airflow.models"] = types.SimpleNamespace(
    Variable=MagicMock(
        get=lambda key, deserialize_json=True: {
            "app_common_variables": {"config_bucket": "mock_bucket"},
            "app_resource_variables": {"gcs_outbound_bucket": "test_bucket"},
            "app_common_variables_refdata": {"config_bucket": "mock_bucket"},
            "app_resource_variables_refdata": {
                "gcs_outbound_bucket": "test_bucket",
                "DRT_ID": "test_drt",
                "bq_dataset": "ref_data_src",
                "bq_target_dataset": "test_dataset.ref_data_src",
            },
            "app_common_variables_corpsec": {"config_bucket": "mock_bucket"},
            "app_resource_variables_corpsec": {
                "gcs_outbound_bucket": "test_bucket",
                "DRT_ID": "test_drt",
                "bq_dataset": "ref_data_src",
                "bq_target_dataset": "test_dataset.ref_data_src",
            },
        }[key]
    ),
    DAG=mock_dag  # keep DAG mocked if needed
)
