import os
import json
import yaml
import logging
from datetime import datetime, timezone

from app.audits.audits import create_audits
from app.extractors.data_extractor import get_gcs_token
from app.exceptions.exceptions import exception_context, log_and_publish_exception
from app.exceptions.exception_handler import DBSchemaWriteError

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


def generate_db_schema(conn, config_path, gcs_token, output_dir):
    """
    Extracts a simplified schema (column name and type) from a database table and saves it as a JSON file.
    Adds audit log entries for each sub-step.
    """
    unix_start_time = int(datetime.now(timezone.utc).timestamp())
    unix_end_time = unix_start_time  # default in case of early error

    try:
        # ðŸ“Œ Step 1: Read Config and Parse Table Name
        try:
            with open(config_path, 'r') as f:
                config = yaml.safe_load(f)
            table_fqn = config["db_schema_table_name"]
            schema_name, table_name = table_fqn.split(".")
            logger.info(f"Config parsed successfully: {table_fqn}")
            unix_end_time = int(datetime.now(timezone.utc).timestamp())
            create_audits(
                directory=output_dir,
                gcs_token=gcs_token,
                message="3/4 GENERATE SCHEMA:Config parsed",
                unix_start_time=unix_start_time,
                unix_end_time=unix_end_time
            )
        except Exception as e:
            logger.error(f"Error reading config or parsing table name: {e}")
            with exception_context(
                object_name="Config Parsing",
                function_name="generate_db_schema",
                file_name=os.path.basename(config_path)
            ) as ctx:
                log_and_publish_exception(Exception(f"Error reading config or parsing table name: {e}"), gcs_token, context=ctx)
            raise

        # ðŸ“Œ Step 2: Query DB Schema
        unix_start_time = int(datetime.now(timezone.utc).timestamp())
        try:
            cursor = conn.cursor()
            query = """
                SELECT column_name, data_type
                FROM information_schema.columns
                WHERE table_schema = %s AND table_name = %s
                ORDER BY ordinal_position;
            """
            cursor.execute(query, (schema_name, table_name))
            rows = cursor.fetchall()
            schema = [{"column": col, "type": dtype} for col, dtype in rows]
            logger.info(f"DB schema queried successfully for {table_fqn}")
            unix_end_time = int(datetime.now(timezone.utc).timestamp())
            create_audits(
                directory=output_dir,
                gcs_token=gcs_token,
                message="3/4 GENERATE SCHEMA:DB queried",
                unix_start_time=unix_start_time,
                unix_end_time=unix_end_time
            )
        except Exception as e:
            logger.error(f"Error querying database schema: {e}")
            with exception_context(
                object_name="DB Query",
                function_name="generate_db_schema",
                file_name=os.path.basename(__file__)
            ) as ctx:
                log_and_publish_exception(Exception(f"Error querying database schema: {e}"), gcs_token, context=ctx)
            raise

        # ðŸ“Œ Step 3: Save Schema File
        unix_start_time = int(datetime.now(timezone.utc).timestamp())
        try:
            schema_dir = config["paths"]["schema_path"]
            os.makedirs(schema_dir, exist_ok=True)
            output_file = os.path.join(schema_dir, f"db_schema_{table_fqn}.json")
            with open(output_file, "w", encoding="utf-8") as f:
                json.dump(schema, f, indent=2)
            logger.info(f"Simplified schema extracted and saved to {output_file}")
            unix_end_time = int(datetime.now(timezone.utc).timestamp())
            create_audits(
                directory=output_dir,
                gcs_token=gcs_token,
                message="3/4 GENERATE SCHEMA:Schema file written",
                unix_start_time=unix_start_time,
                unix_end_time=unix_end_time,
                files=[os.path.basename(output_file)]
            )
        except Exception as e:
            logger.error(f"Error saving schema to file: {e}")
            with exception_context(
                object_name="Schema Saving",
                function_name="generate_db_schema",
                file_name=os.path.basename(__file__)
            ) as ctx:
                log_and_publish_exception(Exception(f"Error saving schema to file: {e}"), gcs_token, context=ctx)
            raise

    except Exception as e:
        logger.error(f"Unhandled error in generate_db_schema: {e}")
        with exception_context(
            object_name="DB Schema Generation",
            function_name="generate_db_schema",
            file_name=os.path.basename(__file__)
        ) as ctx:
            log_and_publish_exception(DBSchemaWriteError(f"Unhandled error in generate_db_schema: {e}"), gcs_token, context=ctx)
        raise
