# tests/test_odin_corpsec_catalog_creation_composer.py
# ─────────────────────────────────────────────────────────────────────────────
# Single-file test with an in-file stub for google.cloud.datacatalog_v1
# Uses the same ModuleType + MagicMock pattern as your working tests.

import unittest
import sys
import types
from unittest.mock import MagicMock, patch
import os

# --- Fallback for exceptions if google.api_core isn't installed ---
try:
    from google.api_core.exceptions import AlreadyExists, MethodNotImplemented
except Exception:  # pragma: no cover
    class AlreadyExists(Exception): ...
    class MethodNotImplemented(Exception): ...
# -----------------------------------------------------------------

# --- Build a realistic stub for google.cloud.datacatalog_v1 (ModuleType) ----
mock_datacatalog_v1 = types.ModuleType("google.cloud.datacatalog_v1")

# Clients commonly touched
mock_datacatalog_v1.DataCatalogClient = MagicMock(name="DataCatalogClient")
mock_datacatalog_v1.PolicyTagManagerClient = MagicMock(name="PolicyTagManagerClient")

# Types namespace many tests/code access
_dc_types = types.SimpleNamespace(
    Entry=MagicMock(name="Entry"),
    EntryGroup=MagicMock(name="EntryGroup"),
    Tag=MagicMock(name="Tag"),
    TagField=MagicMock(name="TagField"),
    TagTemplate=MagicMock(name="TagTemplate"),
    TagTemplateField=MagicMock(name="TagTemplateField"),
    ColumnSchema=MagicMock(name="ColumnSchema"),
    FieldType=MagicMock(name="FieldType"),
    CreateTagRequest=MagicMock(name="CreateTagRequest"),
)
# Sub-namespaces frequently referenced
_dc_types.FieldType.PrimitiveType = types.SimpleNamespace(STRING="STRING")
_dc_types.FieldType.EnumType = types.SimpleNamespace(EnumValue=MagicMock(name="EnumValue"))
mock_datacatalog_v1.types = _dc_types

# Register stub BEFORE importing the module under test
sys.modules.setdefault("google", types.ModuleType("google"))
sys.modules.setdefault("google.cloud", types.ModuleType("google.cloud"))
sys.modules["google.cloud.datacatalog_v1"] = mock_datacatalog_v1
# ---------------------------------------------------------------------------


class TestCreateFileset(unittest.TestCase):
    """
    Mirrors your decorator/return-value style but keeps everything
    in one file, with a datacatalog_v1 ModuleType stub installed up front.
    """

    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_entry_group")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_tag_templates")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_entry")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_schema_from_file")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_schema_files_list")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_pii_config")
    @patch.dict(os.environ, {"GCP_PROJECT": "test_project"}, clear=False)
    @patch("src.odin.odin_corpsec_catalog_creation_composer.assign_pii_tags")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.LOGGER")
    def test_create_fileset_function(
        self,
        mock_logger,
        mock_assign_pii_tags,
        mock_get_pii_config,
        mock_get_schema_files_list,
        mock_get_schema_from_file,
        mock_create_entry,
        mock_create_tag_templates,
        mock_create_entry_group,
    ):
        # Install the stub in sys.modules again inside the test (belt & suspenders)
        sys.modules["google.cloud.datacatalog_v1"] = mock_datacatalog_v1

        # Import AFTER stubbing so the module sees the fake datacatalog_v1
        import src.odin.odin_corpsec_catalog_creation_composer as odin_comp

        # Set up Airflow Variable.get (same style you use)
        from airflow.models import Variable
        Variable.get = MagicMock(side_effect=lambda key, deserialize_json=False: {
            "app_common_variables_corpsec": {},
            "app_resource_variables_corp_sec": {
                "gcs_outbound_bucket": "test_bucket",
                "DRT_ID": "test_drt_id",
                "bq_target_dataset": "project:dataset",
            }
        }[key])

        # Mock return values (your screenshots 2 & 3)
        mock_get_pii_config.side_effect = [{"key1": "value1"}, {"key2": "value2"}]
        mock_get_schema_files_list.return_value = ["file1", "file2"]
        mock_create_entry_group.return_value.name = "test_entry_group"
        mock_create_tag_templates.return_value = (
            "test_entry_tag_template", "test_col_tag_template"
        )
        mock_get_schema_from_file.return_value = {"schema": "test_schema"}
        mock_create_entry.return_value = "test_entry_name"

        # Make DataCatalogClient().create_tag() a no-op
        client_instance = mock_datacatalog_v1.DataCatalogClient.return_value
        client_instance.create_tag.return_value = None

        # Run and assert via logs (like your other file)
        try:
            with self.assertLogs(level="INFO") as log:
                odin_comp.create_fileset()
        except Exception as e:
            self.fail(f"Exception didn't handled in DAG file: {e}")

        # Basic assertions mirroring your existing pattern
        mock_logger.info.assert_called()
        mock_get_pii_config.assert_any_call("data_catalogue/odin_corpsec_inputd_avro_info.json")
        mock_get_pii_config.assert_any_call("data_catalogue/odin_pii_info.json")
        mock_get_schema_files_list.assert_called_once()
        mock_create_entry_group.assert_called_once()
        mock_create_tag_templates.assert_called_once_with(
            "odin_table_metadata",
            "test_project_base_oaep_taxonomy",
            "test_project",
            "us-central1",
        )
        mock_get_schema_from_file.assert_any_call("schemas/dataset_table_schemas", "file1")
        mock_get_schema_from_file.assert_any_call("schemas/dataset_table_schemas", "file2")
        mock_create_entry.assert_called()
        mock_assign_pii_tags.assert_called()
        client_instance.create_tag.assert_called()

        # Optional: one log-line check (adjust to your message text if needed)
        self.assertTrue(any("Tag" in m for m in log.output))


    # Example of your exception-style tests (kept short; copy the pattern if needed)
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_entry_group")
    def test_create_entry_group_exception(self, mock_create_entry_group):
        sys.modules["google.cloud.datacatalog_v1"] = mock_datacatalog_v1
        import src.odin.odin_corpsec_catalog_creation_composer as odin_comp

        mock_create_entry_group.side_effect = AlreadyExists("entry group already exists!")
        from airflow.models import Variable
        Variable.get = MagicMock(side_effect=lambda key, deserialize_json=False: {
            "app_common_variables_corpsec": {},
            "app_resource_variables_corp_sec": {
                "gcs_outbound_bucket": "test_bucket",
                "DRT_ID": "test_drt_id",
                "bq_target_dataset": "project:dataset",
            }
        }[key])

        # Ensure no crash
        try:
            with self.assertLogs(level="INFO"):
                odin_comp.create_fileset()
        except Exception as e:
            self.fail(f"Exception didn't handled in DAG file: {e}")

        mock_create_entry_group.assert_called_once()


if __name__ == "__main__":  # pragma: no cover
    unittest.main()
