from unittest import TestCase, mock
from unittest.mock import patch, MagicMock
import os

class TestOdinCorpSecDatacatalog(TestCase):

    @patch.dict(os.environ, {"GCP_PROJECT": "test_project"}, clear=False)
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_entry_group")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_tag_templates")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_pii_config")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_schema_files_list")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_schema_from_file")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_entry")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.assign_pii_tags")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.datacatalog_v1.DataCatalogClient")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.LOGGER")
    def test_create_tag_warning_already_exists(
        self,
        mock_logger,
        mock_dcc,                   # DataCatalogClient class
        mock_assign_pii_tags,
        mock_create_entry,
        mock_get_schema_from_file,
        mock_get_schema_files_list,
        mock_get_pii_config,
        mock_create_tag_templates,
        mock_create_entry_group,
    ):
        # ---- Arrange: minimal happy path until create_tag, then raise AlreadyExists
        from google.api_core.exceptions import AlreadyExists

        # Airflow Variables used by the DAG/module
        from airflow.models import Variable
        Variable.get = MagicMock(side_effect=lambda key, deserialize_json=False: {
            "app_common_variables_corpsec": {},
            "app_resource_variables_corp_sec": {
                "gcs_outbound_bucket": "bucket",
                "DRT_ID": "drt",
                "bq_target_dataset": "project:corp_sec_src",
            },
        }[key])

        mock_create_entry_group.return_value.name = "projects/p/locations/l/entryGroups/eg"
        mock_create_tag_templates.return_value = ("entry_tmpl", "col_tmpl")
        mock_get_pii_config.side_effect = [{"x": 1}, {"y": 2}]          # two reads in your code
        mock_get_schema_files_list.return_value = ["file1"]             # ensures loop runs
        mock_get_schema_from_file.return_value = {
            "schema": [{"name": "id", "type": "STRING"}]
        }
        mock_create_entry.return_value = "entry_table_name"
        mock_assign_pii_tags.return_value = None

        # Client instance & the behavior we want to test
        client = mock_dcc.return_value
        client.create_tag.side_effect = AlreadyExists("simulated")

        # ---- Act
        import src.odin.odin_corpsec_catalog_creation_composer as mod
        mod.create_fileset()

        # ---- Assert: warning line (105–106) executed
        self.assertTrue(mock_logger.warning.called, "Expected LOGGER.warning to be called")

        # Optional: prove it’s *that* warning (contains 'already exists')
        args, _ = mock_logger.warning.call_args
        rendered = args[0] % args[1:] if len(args) > 1 else str(args[0])
        self.assertIn("already exists", rendered.lower())
