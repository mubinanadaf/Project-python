# tests/test_odin_corpsec_catalog_creation_composer.py
# ─────────────────────────────────────────────────────────────────────────────
# Single-file tests using the same style you already have:
# - unittest.TestCase
# - @patch on "src.odin.odin_corpsec_catalog_creation_composer.…"
# - ModuleType stub for google.cloud.datacatalog_v1
# - assertLogs-based checks

import unittest
import sys
import types
from unittest.mock import MagicMock, patch
import os

# --- Fallback for exceptions if google.api_core isn't installed ---
try:
    from google.api_core.exceptions import AlreadyExists, MethodNotImplemented
except Exception:  # pragma: no cover
    class AlreadyExists(Exception): ...
    class MethodNotImplemented(Exception): ...
# -----------------------------------------------------------------

# --- datacatalog_v1 stub (ModuleType) - same approach as your working file ---
mock_datacatalog_v1 = types.ModuleType("google.cloud.datacatalog_v1")

# Clients that your code/tests may touch:
mock_datacatalog_v1.DataCatalogClient = MagicMock(name="DataCatalogClient")
mock_datacatalog_v1.PolicyTagManagerClient = MagicMock(name="PolicyTagManagerClient")

# A minimal types namespace (often referenced by code)
_dc_types = types.SimpleNamespace(
    Entry=MagicMock(name="Entry"),
    EntryGroup=MagicMock(name="EntryGroup"),
    Tag=MagicMock(name="Tag"),
    TagField=MagicMock(name="TagField"),
    TagTemplate=MagicMock(name="TagTemplate"),
    TagTemplateField=MagicMock(name="TagTemplateField"),
    ColumnSchema=MagicMock(name="ColumnSchema"),
    FieldType=MagicMock(name="FieldType"),
    CreateTagRequest=MagicMock(name="CreateTagRequest"),
)
_dc_types.FieldType.PrimitiveType = types.SimpleNamespace(STRING="STRING")
_dc_types.FieldType.EnumType = types.SimpleNamespace(EnumValue=MagicMock(name="EnumValue"))
mock_datacatalog_v1.types = _dc_types

# Register stub BEFORE importing module under test
sys.modules.setdefault("google", types.ModuleType("google"))
sys.modules.setdefault("google.cloud", types.ModuleType("google.cloud"))
sys.modules["google.cloud.datacatalog_v1"] = mock_datacatalog_v1
# ---------------------------------------------------------------------------

# Ensure the module path we patch actually exists (pre-import the module)
import importlib
importlib.import_module("src.odin.odin_corpsec_catalog_creation_composer")

# Helper: mock Airflow Variable.get the same way you already do
def _mock_airflow_vars():
    from airflow.models import Variable
    Variable.get = MagicMock(side_effect=lambda key, deserialize_json=False: {
        "app_common_variables_corpsec": {},
        "app_resource_variables_corp_sec": {
            "gcs_outbound_bucket": "test_bucket",
            "DRT_ID": "test_drt_id",
            "bq_target_dataset": "project:dataset",
        }
    }[key])


class TestCreateFileset(unittest.TestCase):
    # ---------------- Happy path (kept from your style) ---------------------
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_entry_group")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_tag_templates")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_entry")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_schema_from_file")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_schema_files_list")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_pii_config")
    @patch.dict(os.environ, {"GCP_PROJECT": "test_project"}, clear=False)
    @patch("src.odin.odin_corpsec_catalog_creation_composer.assign_pii_tags")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.LOGGER")
    def test_create_fileset_function(
        self,
        mock_logger,
        mock_assign_pii_tags,
        mock_get_pii_config,
        mock_get_schema_files_list,
        mock_get_schema_from_file,
        mock_create_entry,
        mock_create_tag_templates,
        mock_create_entry_group,
    ):
        import src.odin.odin_corpsec_catalog_creation_composer as odin_comp
        _mock_airflow_vars()

        # Return values like your working test
        mock_get_pii_config.side_effect = [{"key1": "value1"}, {"key2": "value2"}]
        mock_get_schema_files_list.return_value = ["file1", "file2"]
        mock_create_entry_group.return_value.name = "test_entry_group"
        mock_create_tag_templates.return_value = (
            "test_entry_tag_template", "test_col_tag_template"
        )
        mock_get_schema_from_file.return_value = {"schema": "test_schema"}
        mock_create_entry.return_value = "test_entry_name"

        client_instance = mock_datacatalog_v1.DataCatalogClient.return_value
        client_instance.create_tag.return_value = None

        with self.assertLogs(level="INFO") as log:
            odin_comp.create_fileset()

        mock_logger.info.assert_called()
        self.assertTrue(any("Tag" in m for m in log.output))

    # --------- Branch 1: create_entry_group -> except AlreadyExists ----------
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_entry_group")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_tag_templates")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_entry")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_schema_from_file")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_schema_files_list")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_pii_config")
    @patch.dict(os.environ, {"GCP_PROJECT": "test_project"}, clear=False)
    @patch("src.odin.odin_corpsec_catalog_creation_composer.assign_pii_tags")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.LOGGER")
    def test_create_fileset_entry_group_already_exists(
        self,
        mock_logger,
        mock_assign_pii_tags,
        mock_get_pii_config,
        mock_get_schema_files_list,
        mock_get_schema_from_file,
        mock_create_entry,
        mock_create_tag_templates,
        mock_create_entry_group,
    ):
        from google.api_core.exceptions import AlreadyExists
        import src.odin.odin_corpsec_catalog_creation_composer as mod
        _mock_airflow_vars()

        mock_create_entry_group.side_effect = AlreadyExists("entry group exists")
        mock_get_pii_config.side_effect = [{"k": "v"}, {"k2": "v2"}]
        mock_get_schema_files_list.return_value = ["file1"]
        mock_get_schema_from_file.return_value = {"schema": "s"}
        mock_create_tag_templates.return_value = ("t1", "t2")
        mock_create_entry.return_value = "entry"

        with self.assertLogs(level="INFO"):
            mod.create_fileset()

        self.assertTrue(any("already exist" in (args[0] if args else "")
                            for (args, _kwargs) in mock_logger.warning.call_args_list))

    # --------- Branch 2: create_tag_templates -> except AlreadyExists -------
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_tag_templates")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_entry_group")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_entry")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_schema_from_file")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_schema_files_list")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_pii_config")
    @patch.dict(os.environ, {"GCP_PROJECT": "test_project"}, clear=False)
    @patch("src.odin.odin_corpsec_catalog_creation_composer.assign_pii_tags")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.LOGGER")
    def test_create_fileset_tag_templates_already_exists(
        self,
        mock_logger,
        mock_assign_pii_tags,
        mock_get_pii_config,
        mock_get_schema_files_list,
        mock_get_schema_from_file,
        mock_create_entry,
        mock_create_entry_group,
        mock_create_tag_templates,
    ):
        from google.api_core.exceptions import AlreadyExists
        import src.odin.odin_corpsec_catalog_creation_composer as mod
        _mock_airflow_vars()

        mock_create_entry_group.return_value.name = "eg"
        mock_create_tag_templates.side_effect = AlreadyExists("tag templates exist")
        mock_get_pii_config.side_effect = [{"k": "v"}, {"k2": "v2"}]
        mock_get_schema_files_list.return_value = ["file1"]
        mock_get_schema_from_file.return_value = {"schema": "s"}
        mock_create_entry.return_value = "e"

        with self.assertLogs(level="INFO"):
            mod.create_fileset()

        self.assertTrue(any("already exist" in (args[0] if args else "")
                            for (args, _kwargs) in mock_logger.warning.call_args_list))

    # ----- Branch 3: assign_pii_tags (inside loop) -> except AlreadyExists ---
    @patch("src.odin.odin_corpsec_catalog_creation_composer.assign_pii_tags")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_entry")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_schema_from_file")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_schema_files_list")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_pii_config")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_tag_templates")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_entry_group")
    @patch.dict(os.environ, {"GCP_PROJECT": "test_project"}, clear=False)
    @patch("src.odin.odin_corpsec_catalog_creation_composer.LOGGER")
    def test_create_fileset_assign_pii_tags_already_exists(
        self,
        mock_logger,
        mock_create_entry_group,
        mock_create_tag_templates,
        mock_get_pii_config,
        mock_get_schema_files_list,
        mock_get_schema_from_file,
        mock_create_entry,
        mock_assign_pii_tags,
    ):
        from google.api_core.exceptions import AlreadyExists
        import src.odin.odin_corpsec_catalog_creation_composer as mod
        _mock_airflow_vars()

        mock_create_entry_group.return_value.name = "eg"
        mock_create_tag_templates.return_value = ("t1", "t2")
        mock_get_pii_config.side_effect = [{"key": "v"}, {"key2": "v2"}]
        mock_get_schema_files_list.return_value = ["file1"]
        mock_get_schema_from_file.return_value = {"schema": "s"}
        mock_create_entry.return_value = "entry"
        mock_assign_pii_tags.side_effect = AlreadyExists("pii tag exists")

        with self.assertLogs(level="INFO"):
            mod.create_fileset()

        self.assertTrue(any("already exist" in (args[0] if args else "")
                            for (args, _kwargs) in mock_logger.warning.call_args_list))

    # ------ Branch 4: DataCatalogClient.create_tag -> except AlreadyExists ---
    @patch("src.odin.odin_corpsec_catalog_creation_composer.datacatalog_v1.DataCatalogClient")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_entry")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_schema_from_file")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_schema_files_list")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.get_pii_config")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_tag_templates")
    @patch("src.odin.odin_corpsec_catalog_creation_composer.create_entry_group")
    @patch.dict(os.environ, {"GCP_PROJECT": "test_project"}, clear=False)
    @patch("src.odin.odin_corpsec_catalog_creation_composer.LOGGER")
    def test_create_fileset_create_tag_already_exists(
        self,
        mock_logger,
        mock_create_entry_group,
        mock_create_tag_templates,
        mock_get_pii_config,
        mock_get_schema_files_list,
        mock_get_schema_from_file,
        mock_create_entry,
        mock_dcc,  # datacatalog_v1.DataCatalogClient
    ):
        from google.api_core.exceptions import AlreadyExists
        import src.odin.odin_corpsec_catalog_creation_composer as mod
        _mock_airflow_vars()

        mock_create_entry_group.return_value.name = "eg"
        mock_create_tag_templates.return_value = ("t1", "t2")
        mock_get_pii_config.side_effect = [{"key": "v"}, {"key2": "v2"}]
        mock_get_schema_files_list.return_value = ["file1"]
        mock_get_schema_from_file.return_value = {"schema": "s"}
        mock_create_entry.return_value = "entry"

        client = mock_dcc.return_value
        client.create_tag.side_effect = AlreadyExists("tag exists")

        with self.assertLogs(level="INFO"):
            mod.create_fileset()

        self.assertTrue(any("already exist" in (args[0] if args else "")
                            for (args, _kwargs) in mock_logger.warning.call_args_list))
        client.create_tag.assert_called()


if __name__ == "__main__":  # pragma: no cover
    unittest.main()
